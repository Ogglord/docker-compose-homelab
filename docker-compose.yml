services:
  nginx:
    image: 'jc21/nginx-proxy-manager:latest'
    container_name: nginx
    restart: unless-stopped
    ports:
      - '80:80' # Public HTTP Port
      - '443:443' # Public HTTPS Port
    #  - '81:81' # Admin Web Port (not needed, its proxied @ npm.TLDN)
    environment:
      - DB_MYSQL_HOST=mysql
      - DB_MYSQL_PORT=3306
      - DB_MYSQL_USER=${NPM_CREDENTIAL}
      - DB_MYSQL_PASSWORD=${NPM_CREDENTIAL}
      - DB_MYSQL_NAME=${NPM_CREDENTIAL}
      - DISABLE_IPV6=true
    volumes:
      - ${CONFIG_ROOT:-.}/npm:/data
      - ${CONFIG_ROOT:-.}/npm_letsencrypt:/etc/letsencrypt
    depends_on:
      - mysql
    labels:
      - homepage.group=Infrastructure
      - homepage.name=Nginx Proxy Manager
      - homepage.icon=nginx-proxy-manager.png
      - homepage.href=https://npm.${TLDN}
      - homepage.description=Proxy
      - homepage.weight=3 #
  mysql:
    image: 'jc21/mariadb-aria:latest'
    container_name: mysql
    restart: unless-stopped
    environment:
      - MYSQL_ROOT_PASSWORD=${NPM_CREDENTIAL}
      - MYSQL_DATABASE=${NPM_CREDENTIAL}
      - MYSQL_USER=${NPM_CREDENTIAL}
      - MYSQL_PASSWORD=${NPM_CREDENTIAL}
      - MARIADB_AUTO_UPGRADE=1
    volumes:
      - ${CONFIG_ROOT:-.}/mysql:/var/lib/mysql
  plex:
    image: lscr.io/linuxserver/plex:latest
    container_name: plex
    network_mode: host
    environment:
      - DOCKER_MODS=oggelito/plex-tubearchivist
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIMEZONE}
      - VERSION=docker
      - PLEX_HOME=/config/
      - TA_API_KEY=${TA_API_KEY}
      - TA_URL=https://tube.${TLDN}:443
    volumes:
      - plex:/config
      - nas_media:/media
      - /dev/shm:/transcode
      #- ./plex/init.d:/custom-cont-init.d:ro
      #- ./plex/services.d:/custom-services.d:ro
    restart: unless-stopped
    devices:
      - /dev/dri:/dev/dri 
    healthcheck:
      test: curl --connect-timeout 5 --silent --show-error --fail http://localhost:32400/identity
      interval: 1m00s
      timeout: 5s
      retries: 6
      start_period: 10s
    labels:
      - homepage.group=Media
      - homepage.name=Plex
      - homepage.icon=plex.png
      - homepage.href=https://xyz.${TLDN}:6969
      - homepage.description=Media server
      - homepage.weight=5 #
  tautulli:
    image: lscr.io/linuxserver/tautulli:latest
    container_name: tautulli
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIMEZONE}
    volumes:
      - ${CONFIG_ROOT:-.}/tautulli:/config
    restart: unless-stopped
    labels:
      - homepage.group=Media
      - homepage.name=Tautulli
      - homepage.icon=tautulli.png
      - homepage.href=/tautulli
      - homepage.description=Plex Statistics
      - homepage.weight=4
      - homepage.widget.type=tautulli
      - homepage.widget.url=https://${HOSTNAME}/tautulli
      - homepage.widget.key=${TAUTULLI_API_KEY}
  pinchflat:
    image: keglin/pinchflat:latest
    container_name: pinchflat    
    environment:
      - TZ=Europe/Stockholm
      - BASE_ROUTE_PATH=/pinchflat
    volumes:
      - ${CONFIG_ROOT:-.}/pinchflat:/config
      - nas_youtube:/downloads     
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8945/healthcheck"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    labels:
      - homepage.group=Download
      - homepage.name=Pinchflat
      - homepage.icon=youtube.png
      - homepage.href=/pinchflat
      - homepage.description=Youtube management
      - homepage.weight=5       
  tubearchivist:
    container_name: tubearchivist
    restart: unless-stopped
    image: bbilly1/tubearchivist:unstable
    volumes:
      - nas_youtube:/youtube
      - cache:/cache
    environment:
      - ES_URL=http://archivist-es:9200     # needs protocol e.g. http and port
      - REDIS_HOST=archivist-redis          # don't add protocol
      - HOST_UID=${USER_ID}
      - HOST_GID=${GROUP_ID}
      - TA_HOST=https://tube.${TLDN} 100.70.208.78 192.168.0.2 # my host name (s)
      - TA_USERNAME=${CIFS_USERNAME}         # yo
      - TA_PASSWORD=Ã¶l                       # BEER
      - TA_PORT=8000
      - ELASTIC_PASSWORD=${CIFS_PASSWORD}!  
      - TZ=${TIMEZONE}                     
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 2m
      timeout: 10s
      retries: 3
      start_period: 30s
    depends_on:
      - archivist-es
      - archivist-redis
    labels:   
      - homepage.group=Download
      - homepage.name=TubeArchivist
      - homepage.icon=youtube.png
      - homepage.href=https://tube.${TLDN}
      - homepage.description=Media server
      - homepage.weight=6 #
      - homepage.widget.type=tubearchivist
      - homepage.widget.url=https://tube.${TLDN}
      - homepage.widget.key=${TA_API_KEY}  
  homepage:
    image: ghcr.io/gethomepage/homepage:latest
    container_name: homepage
    environment:
      - HOMEPAGE_VAR_TITLE=${HOMEPAGE_VAR_TITLE}
      - HOMEPAGE_VAR_SEARCH_PROVIDER=${HOMEPAGE_VAR_SEARCH_PROVIDER}
      - HOMEPAGE_VAR_HEADER_STYLE=${HOMEPAGE_VAR_HEADER_STYLE}
      - HOMEPAGE_VAR_WEATHER_CITY=${HOMEPAGE_VAR_WEATHER_CITY}
      - HOMEPAGE_VAR_WEATHER_LAT=${HOMEPAGE_VAR_WEATHER_LAT}
      - HOMEPAGE_VAR_WEATHER_LONG=${HOMEPAGE_VAR_WEATHER_LONG}
      - HOMEPAGE_VAR_WEATHER_TIME=${TIMEZONE}
      - HOMEPAGE_VAR_WEATHER_UNIT=${HOMEPAGE_VAR_WEATHER_UNIT}
    volumes:
      - ${CONFIG_ROOT:-.}/homepage:/app/config
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ${DATA_ROOT}:/data
    ports:
      - 3000:3000
    restart: always
    command: [sh, -c, "cp -n /app/config/tpl/*.yaml /app/config && node server.js"]      
  archivist-redis:
    image: redis/redis-stack-server
    container_name: archivist-redis
    restart: unless-stopped
    expose:
      - "6379"
    volumes:
      - redis:/data
    depends_on:
      - archivist-es
  archivist-es:
    image: bbilly1/tubearchivist-es         # only for amd64, or use official es 8.13.2
    container_name: archivist-es
    restart: unless-stopped
    environment:
      - "ELASTIC_PASSWORD=${CIFS_PASSWORD}!"       # matching Elasticsearch password
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - "xpack.security.enabled=true"
      - "discovery.type=single-node"
      - "path.repo=/usr/share/elasticsearch/data/snapshot"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - es:/usr/share/elasticsearch/data    # check for permission error when using bind mount, see readme
    expose:
      - "9200"


## DVR
  prowlarr:
    image: lscr.io/linuxserver/prowlarr:latest
    container_name: prowlarr
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIMEZONE}
    volumes:
      - ${CONFIG_ROOT:-.}/prowlarr:/config
    restart: always
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://127.0.0.1:9696/prowlarr/ping" ]
      interval: 30s
      retries: 10
    labels:
      - homepage.group=Download
      - homepage.name=Prowlarr
      - homepage.icon=prowlarr.png
      - homepage.href=/prowlarr
      - homepage.description=Indexers management
      - homepage.weight=1
      - homepage.widget.type=prowlarr
      - homepage.widget.url=http://prowlarr:9696/prowlarr
      - homepage.widget.key=${PROWLARR_API_KEY}    
  sonarr:
    image: lscr.io/linuxserver/sonarr
    container_name: sonarr
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIMEZONE}
    volumes:
      - ${CONFIG_ROOT:-.}/sonarr:/config
      - ${DATA_ROOT}:/data
      - /incomplete:/incomplete
    restart: always
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://127.0.0.1:8989/sonarr/ping" ]
      interval: 30s
      retries: 10
    labels:
      - homepage.group=Media
      - homepage.name=Sonarr
      - homepage.icon=sonarr.png
      - homepage.href=/sonarr
      - homepage.description=Series management
      - homepage.weight=1
      - homepage.widget.type=sonarr
      - homepage.widget.url=http://sonarr:8989/sonarr
      - homepage.widget.key=${SONARR_API_KEY}
  radarr:
    image: lscr.io/linuxserver/radarr
    container_name: radarr
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIMEZONE}
    volumes:
      - ${CONFIG_ROOT:-.}/radarr:/config
      - ${DATA_ROOT}:/data
      - /incomplete:/incomplete
    restart: always
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://127.0.0.1:7878/radarr/ping" ]
      interval: 30s
      retries: 10
    labels:
      - homepage.group=Media
      - homepage.name=Radarr
      - homepage.icon=radarr.png
      - homepage.href=/radarr
      - homepage.description=Movies management
      - homepage.weight=2
      - homepage.widget.type=radarr
      - homepage.widget.url=http://radarr:7878/radarr
      - homepage.widget.key=${RADARR_API_KEY}          
  qbittorrent:
    image: lscr.io/linuxserver/qbittorrent:libtorrentv1
    container_name: qbittorrent
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIMEZONE}
      - WEBUI_PORT=8080
      - DOCKER_MODS=ghcr.io/gabe565/linuxserver-mod-vuetorrent
    volumes:
      - ${CONFIG_ROOT:-.}/qbittorrent:/config
      - ${DOWNLOAD_ROOT}:/data/downloads
      - /incomplete:/incomplete
    restart: always
    labels:
      - homepage.group=Download
      - homepage.name=qBittorrent
      - homepage.icon=qbittorrent.png
      - homepage.href=/qbittorrent
      - homepage.description=Bittorrent client
      - homepage.weight=2
      - homepage.widget.type=qbittorrent
      - homepage.widget.url=http://qbittorrent:8080
      - homepage.widget.username=${QBITTORRENT_USERNAME}
      - homepage.widget.password=${QBITTORRENT_PASSWORD}
  # watchtower:
  #   image: containrrr/watchtower
  #   container_name: watchtower
  #   restart: always
  #   environment:
  #     - WATCHTOWER_CLEANUP=true
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  # autoheal:
  #   image: willfarrell/autoheal:latest
  #   container_name: autoheal
  #   restart: always
  #   environment:
  #     - AUTOHEAL_CONTAINER_LABEL=all
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
volumes:
  nas_root:
    driver: local
    driver_opts:
      type: cifs
      device: //192.168.0.9/storage
      o: username=${CIFS_USERNAME},password=${CIFS_PASSWORD},uid=1000,gid=1000
  nas_youtube:
    driver: local
    driver_opts:
      type: cifs
      device: //192.168.0.9/youtube
      o: username=${CIFS_USERNAME},password=${CIFS_PASSWORD},uid=1000,gid=1000,file_mode=0777,dir_mode=0777
  nas_media:
    driver: local
    driver_opts:
      type: cifs
      device: //192.168.0.9/media
      o: username=${CIFS_USERNAME},password=${CIFS_PASSWORD},uid=1000,gid=1000
  nas_downloads:
    driver: local
    driver_opts:
      type: cifs
      device: //192.168.0.9/downloads
      o: username=${CIFS_USERNAME},password=${CIFS_PASSWORD},uid=1000,gid=1000,file_mode=0777,dir_mode=0777
  cache:
  redis:
  es:
  plex:


networks:
  default:
    name: docker-compose-ogge